; /*****************************************************************************
;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
;  *****************************************************************************
;  * Copyright 2021-2025 Marco Spedaletti (asimov@mclink.it)
;  *
;  * Licensed under the Apache License, Version 2.0 (the "License");
;  * you may not use this file eXcept in compliance with the License.
;  * You may obtain a copy of the License at
;  *
;  * http://www.apache.org/licenses/LICENSE-2.0
;  *
;  * Unless required by applicable law or agreed to in writing, software
;  * distributed under the License is distributed on an "AS IS" BASIS,
;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either eXpress or implied.
;  * See the License for the specific language governing permissions and
;  * limitations under the License.
;  *----------------------------------------------------------------------------
;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
;  *
;  * http://www.apache.org/licenses/LICENSE-2.0
;  *
;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
;  * il software distribuito nei termini della Licenza è distribuito
;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
;  * implicite. Consultare la Licenza per il testo specifico che regola le
;  * autorizzazioni e le limitazioni previste dalla medesima.
;  ****************************************************************************/
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                                                                             *
;*                            STARTUP ROUTINE ON TED                           *
;*                                                                             *
;*                             by Marco Spedaletti                             *
;*                                                                             *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

CPUMEMMOVE:
    LDY MATHPTR0+1
    BEQ CPUMEMMOVER
    LDY #$0
CPUMEMMOVE2:
    LDA (TMPPTR), Y
    STA (TMPPTR2), Y
    INY
    BNE CPUMEMMOVE2
    INC TMPPTR+1
    INC TMPPTR2+1
    DEC MATHPTR0+1
    BNE CPUMEMMOVE2

CPUMEMMOVER:
    LDY #$0
CPUMEMMOVER2:
    LDA (TMPPTR), Y
    STA (TMPPTR2), Y
    INY
    CPY MATHPTR0
    BNE CPUMEMMOVER2
    RTS

TEDISRSVC2:
    RTS

TEDISRSVC:
    PHA
    TXA
    PHA
    TYA
    PHA
    JSR JIFFYUPDATE
    JSR TEDISRSVC2
    JSR MUSICPLAYER
@IF deployed.joystick && !joystickConfig.sync
    JSR JOYSTICKMANAGER
@ENDIF
@IF deployed.keyboard && !keyboardConfig.sync
    JSR KEYBOARDMANAGER
@ENDIF
    PHA
    LDA $FF09
    STA $FF09
    PLA
    
    PLA
    TAY
    PLA
    TAX
    PLA

    JMP $FCBE


TEDSTARTUP:

    ; SET_VIDEO( DEFAULT_VIDEO )
    LDA $FF12
    AND #%00000111
    ORA #%11011000
    STA $FF12
    LDA $FF14
    AND #%00000111
    LDA #%00001000
    STA $FF14
    LDA $FF13
    AND #%00000011
    ORA #%11010100
    STA $FF13
    
    ; SET_BACKGROUND_COLOR( BLACK )
    LDA #$0
    STA $FF15

    ; SET STARTUP CURSOR POSITION    
    LDA #0
    STA $64
    LDA #0
    STA $66

    LDA #<TEDFREQTABLE
    STA TEDTMPPTR2
    LDA #>TEDFREQTABLE
    STA TEDTMPPTR2+1
    LDA #$0
    STA TEDTMPPTR
    STA TEDTMPPTR+1
    STA TEDJIFFIES
    STA TEDJIFFIES+1

    SEI
    LDA #<TEDISRSVC
    STA $0314
    LDA #>TEDISRSVC
    STA $0315
    CLI

@IF vestigialConfig.clsImplicit
	JSR CLST
@ENDIF

    LDA #$00
    AND #$0f
    STA $FF19

    RTS

IMF_TOKEN_WAIT1								= $ff
IMF_TOKEN_WAIT2								= $fe
IMF_TOKEN_CONTROL							= $d0
IMF_TOKEN_PROGRAM_CHANGE					= $e0
IMF_TOKEN_NOTE								= $40

IMF_INSTRUMENT_ACOUSTIC_GRAND_PIANO			= $01
IMF_INSTRUMENT_BRIGHT_ACOUSTIC_PIANO			= $02
IMF_INSTRUMENT_ELECTRIC_GRAND_PIANO			= $03
IMF_INSTRUMENT_HONKY_TONK_PIANO				= $04
IMF_INSTRUMENT_ELECTRIC_PIANO1				= $05
IMF_INSTRUMENT_ELECTRIC_PIANO2				= $06
IMF_INSTRUMENT_HARPSICHORD					= $07
IMF_INSTRUMENT_CLAVI						= $08
IMF_INSTRUMENT_CELESTA						= $09
IMF_INSTRUMENT_GLOCKENSPIEL					= $0A
IMF_INSTRUMENT_MUSIC_BOX					= $0B
IMF_INSTRUMENT_VIBRAPHONE					= $0C
IMF_INSTRUMENT_MARIMBA						= $0D
IMF_INSTRUMENT_XYLOPHONE					= $0E
IMF_INSTRUMENT_TUBULAR_BELLS				= $0F
IMF_INSTRUMENT_DULCIMER						= $10
IMF_INSTRUMENT_DRAWBAR_ORGAN				= $11
IMF_INSTRUMENT_PERCUSSIVE_ORGAN				= $12
IMF_INSTRUMENT_ROCK_ORGAN					= $13
IMF_INSTRUMENT_CHURCH_ORGAN					= $14
IMF_INSTRUMENT_REED_ORGAN					= $15
IMF_INSTRUMENT_ACCORDION					= $16
IMF_INSTRUMENT_HARMONICA					= $17
IMF_INSTRUMENT_TANGO_ACCORDION				= $18
IMF_INSTRUMENT_ACOUSTIC_GUITAR_NYLON			= $19
IMF_INSTRUMENT_ACOUSTIC_GUITAR_STEEL			= $1A
IMF_INSTRUMENT_ELECTRIC_GUITAR_JAZZ			= $1B
IMF_INSTRUMENT_ELECTRIC_GUITAR_CLEAN			= $1C
IMF_INSTRUMENT_ELECTRIC_GUITAR_MUTED			= $1D
IMF_INSTRUMENT_OVERDRIVEN_GUITAR			= $1E
IMF_INSTRUMENT_DISTORTION_GUITAR			= $1F
IMF_INSTRUMENT_GUITAR_HARMONICS				= $20
IMF_INSTRUMENT_ACOUSTIC_BASS				= $21
IMF_INSTRUMENT_ELECTRIC_BASS_FINGER			= $22
IMF_INSTRUMENT_ELECTRIC_BASS_PICK			= $23
IMF_INSTRUMENT_FRETLESS_BASS				= $24
IMF_INSTRUMENT_SLAP_BASS_1					= $25
IMF_INSTRUMENT_SLAP_BASS_2					= $26
IMF_INSTRUMENT_SYNTH_BASS_1					= $27
IMF_INSTRUMENT_SYNTH_BASS_2					= $28
IMF_INSTRUMENT_VIOLIN						= $29
IMF_INSTRUMENT_VIOLA						= $2A
IMF_INSTRUMENT_CELLO						= $2B
IMF_INSTRUMENT_CONTRABASS					= $2C
IMF_INSTRUMENT_TREMOLO_STRINGS				= $2D
IMF_INSTRUMENT_PIZZICATO_STRINGS			= $2E
IMF_INSTRUMENT_ORCHESTRAL_HARP				= $2F
IMF_INSTRUMENT_TIMPANI						= $30
IMF_INSTRUMENT_STRING_ENSEMBLE_1			= $31
IMF_INSTRUMENT_STRING_ENSEMBLE_2			= $32
IMF_INSTRUMENT_SYNTHSTRINGS_1				= $33
IMF_INSTRUMENT_SYNTHSTRINGS_2				= $34
IMF_INSTRUMENT_CHOIR_AAHS					= $35
IMF_INSTRUMENT_VOICE_OOHS					= $36
IMF_INSTRUMENT_SYNTH_VOICE					= $37
IMF_INSTRUMENT_ORCHESTRA_HIT				= $38
IMF_INSTRUMENT_TRUMPET						= $39
IMF_INSTRUMENT_TROMBONE						= $3A
IMF_INSTRUMENT_TUBA							= $3B
IMF_INSTRUMENT_MUTED_TRUMPET				= $3C
IMF_INSTRUMENT_FRENCH_HORN					= $3D
IMF_INSTRUMENT_BRASS_SECTION				= $3E
IMF_INSTRUMENT_SYNTHBRASS_1					= $3F
IMF_INSTRUMENT_SYNTHBRASS_2					= $40
IMF_INSTRUMENT_SOPRANO_SAX					= $41
IMF_INSTRUMENT_ALTO_SAX						= $42
IMF_INSTRUMENT_TENOR_SAX					= $43
IMF_INSTRUMENT_BARITONE_SAX					= $44
IMF_INSTRUMENT_OBOE							= $45
IMF_INSTRUMENT_ENGLISH_HORN					= $46
IMF_INSTRUMENT_BASSOON						= $47
IMF_INSTRUMENT_CLARINET						= $48
IMF_INSTRUMENT_PICCOLO						= $49
IMF_INSTRUMENT_FLUTE						= $4A
IMF_INSTRUMENT_RECORDER						= $4B
IMF_INSTRUMENT_PAN_FLUTE					= $4C
IMF_INSTRUMENT_BLOWN_BOTTLE					= $4D
IMF_INSTRUMENT_SHAKUHACHI					= $4E
IMF_INSTRUMENT_WHISTLE						= $4F
IMF_INSTRUMENT_OCARINA						= $50
IMF_INSTRUMENT_LEAD_1_SQUARE				= $51
IMF_INSTRUMENT_LEAD_2_SAWTOOTH				= $52
IMF_INSTRUMENT_LEAD_3_CALLIOPE				= $53
IMF_INSTRUMENT_LEAD_4_CHIFF					= $54
IMF_INSTRUMENT_LEAD_5_CHARANG				= $55
IMF_INSTRUMENT_LEAD_6_VOICE					= $56
IMF_INSTRUMENT_LEAD_7_FIFTHS				= $57
IMF_INSTRUMENT_LEAD_8_BASS_LEAD				= $58
IMF_INSTRUMENT_PAD_1_NEW_AGE				= $59
IMF_INSTRUMENT_PAD_2_WARM					= $5A
IMF_INSTRUMENT_PAD_3_POLYSYNTH				= $5B
IMF_INSTRUMENT_PAD_4_CHOIR					= $5C
IMF_INSTRUMENT_PAD_5_BOWED					= $5D
IMF_INSTRUMENT_PAD_6_METALLIC				= $5E
IMF_INSTRUMENT_PAD_7_HALO					= $5F
IMF_INSTRUMENT_PAD_8_SWEEP					= $60
IMF_INSTRUMENT_FX_1_RAIN					= $61
IMF_INSTRUMENT_FX_2_SOUNDTRACK				= $62
IMF_INSTRUMENT_FX_3_CRYSTAL					= $63
IMF_INSTRUMENT_FX_4_ATMOSPHERE				= $64
IMF_INSTRUMENT_FX_5_BRIGHTNESS				= $65
IMF_INSTRUMENT_FX_6_GOBLINS					= $66
IMF_INSTRUMENT_FX_7_ECHOES					= $67
IMF_INSTRUMENT_FX_8_SCI_FI					= $68
IMF_INSTRUMENT_SITAR						= $69
IMF_INSTRUMENT_BANJO						= $6A
IMF_INSTRUMENT_SHAMISEN						= $6B
IMF_INSTRUMENT_KOTO							= $6C
IMF_INSTRUMENT_KALIMBA						= $6D
IMF_INSTRUMENT_BAG_PIPE						= $6E
IMF_INSTRUMENT_FIDDLE						= $6F
IMF_INSTRUMENT_SHANAI						= $70
IMF_INSTRUMENT_TINKLE_BELL					= $71
IMF_INSTRUMENT_AGOGO						= $72
IMF_INSTRUMENT_STEEL_DRUMS					= $73
IMF_INSTRUMENT_WOODBLOCK					= $74
IMF_INSTRUMENT_TAIKO_DRUM					= $75
IMF_INSTRUMENT_MELODIC_TOM					= $76
IMF_INSTRUMENT_SYNTH_DRUM					= $77
IMF_INSTRUMENT_REVERSE_CYMBAL				= $78
IMF_INSTRUMENT_GUITAR_FRET_NOISE			= $79
IMF_INSTRUMENT_BREATH_NOISE					= $7A
IMF_INSTRUMENT_SEASHORE						= $7B
IMF_INSTRUMENT_BIRD_TWEET					= $7C
IMF_INSTRUMENT_TELEPHONE_RING				= $7D
IMF_INSTRUMENT_HELICOPTER					= $7E
IMF_INSTRUMENT_APPLAUSE						= $7F
IMF_INSTRUMENT_GUNSHOT						= $80

TEDSTART:
TEDSTART0:
TEDSTART1:
    LDX #$34
    STX $FF11
    RTS
    
TEDSTARTVOL:
    RTS

TEDFREQ:
    JSR TEDCALCFREQ
    LSR
    BCC TEDFREQ0X
    JSR TEDFREQ0T
TEDFREQ0X:
    LSR
    BCC TEDFREQ1X
    JSR TEDFREQ1T
TEDFREQ1X:
    RTS

TEDCALCFREQ:
    ; int v[XY] = 1024 - (111841 / _parameter[YX]);
    RTS

TEDFREQ0:
    JSR TEDCALCFREQ
TEDFREQ0T:
    JMP TEDPROGFREQ0

TEDFREQ1:
    JSR TEDCALCFREQ
TEDFREQ1T:
    JMP TEDPROGFREQ1

TEDPROGFREQ:
    LSR
    BCC TEDPROGFREQ0X
    JSR TEDPROGFREQ0
TEDPROGFREQ0X:
    LSR
    BCC TEDPROGFREQ1X
    JSR TEDPROGFREQ1
TEDPROGFREQ1X:
    RTS

TEDPROGFREQ0:
    PHA
    STX $FF0E
    LDA $FF12
    AND #$FC
    STY MATHPTR0
    ORA MATHPTR0
    STA $FF12
    PLA
    RTS

TEDPROGFREQ1:
    PHA
    STX $FF0F
    LDA $FF10
    AND #$FC
    STY MATHPTR0
    ORA MATHPTR0
    STA $FF10
    PLA
    RTS

; ------------

TEDPROGDUR:
    LSR
    BCC TEDPROGDUR0X
    JSR TEDPROGDUR0
TEDPROGDUR0X:
    LSR
    BCC TEDPROGDUR1X
    JSR TEDPROGDUR1
TEDPROGDUR1X:
    RTS

TEDPROGDUR0:
    STX TEDTIMER
    STY TEDTIMER+1
    RTS

TEDPROGDUR1:
    STX TEDTIMER+2
    STY TEDTIMER+3
    RTS

; ------------

TEDWAITDUR:
    LSR
    BCC TEDWAITDUR0X
    JSR TEDWAITDUR0
TEDWAITDUR0X:
    LSR
    BCC TEDWAITDUR1X
    JSR TEDWAITDUR1
TEDWAITDUR1X:
    RTS

TEDWAITDUR0:
    LDA TEDTIMER+1
    BNE TEDWAITDUR0
TEDWAITDUR0L1:
    LDA TEDTIMER
    BNE TEDWAITDUR0L1
    RTS

TEDWAITDUR1:
    LDA TEDTIMER+3
    BNE TEDWAITDUR1
TEDWAITDUR1L1:
    LDA TEDTIMER+2
    BNE TEDWAITDUR1L1
    RTS

; ------------

TEDPROGPULSE:
TEDPROGPULSE0:
TEDPROGPULSE1:
    RTS

TEDPROGCTR:
TEDPROGCTR0:
TEDPROGCTR1:
    RTS

TEDPROGAD:
TEDPROGAD0:
TEDPROGAD1:
    RTS

TEDPROGSR:
TEDPROGSR0:
TEDPROGSR1:
    RTS

TEDSTOP:
    LSR
    BCC TEDSTOP0X
    JSR TEDSTOP0
TEDSTOP0X:
    LSR
    BCC TEDSTOP1X
    JSR TEDSTOP1
TEDSTOP1X:
    RTS

TEDSTOP0:
    PHA
    LDA $FF11
    AND #$EF
    STA $FF11
    PLA
    RTS

TEDSTOP1:
    PHA
    LDA $FF11
    AND #$DF
    STA $FF11
    PLA
    RTS

MUSICPLAYERRESET:
    LDA #$0
    STA TEDJIFFIES
    STA TEDTMPOFS
    LDA #$1
    STA TEDMUSICREADY
    LDA TEDTMPPTR_BACKUP
    STA TEDTMPPTR
    LDA TEDTMPPTR_BACKUP+1
    STA TEDTMPPTR+1
    LDA TEDLASTBLOCK_BACKUP
    STA TEDLASTBLOCK
    LDA TEDBLOCKS_BACKUP
    STA TEDBLOCKS
    BEQ MUSICPLAYERRESET3
    LDA #$ff
    JMP MUSICPLAYERRESET2
MUSICPLAYERRESET3:
    LDA TEDLASTBLOCK_BACKUP
MUSICPLAYERRESET2:
    STA TEDTMPLEN
    RTS

; This is the entry point for music play routine
; using the interrupt. 
MUSICPLAYER:
    PHA
    LDA TEDMUSICREADY
    BEQ MUSICPLAYERQ
    LDA TEDMUSICPAUSE
    BNE MUSICPLAYERQ2
    TXA
    PHA
    TYA
    PHA
    JSR MUSICPLAYERR
    PLA
    TAY
    PLA
    TAX
    JMP MUSICPLAYERQ2
MUSICPLAYERQ:
    LDA TEDMUSICLOOP
    BEQ MUSICPLAYERQ2
    JSR MUSICPLAYERRESET
MUSICPLAYERQ2:
    LDA TEDTIMER+1
    BNE MUSICPLAYERQ2D0
    LDA TEDTIMER
    BNE MUSICPLAYERQ2D0
    JMP MUSICPLAYERQ21
MUSICPLAYERQ2D0:
    DEC TEDTIMER
    CMP #$FF
    BNE MUSICPLAYERQ2D01
    DEC TEDTIMER+1
MUSICPLAYERQ2D01:
    LDA TEDTIMER+1
    BNE MUSICPLAYERQ21
    LDA TEDTIMER
    BNE MUSICPLAYERQ21
    JSR TEDSTOP0

MUSICPLAYERQ21:
    LDA TEDTIMER+3
    BNE MUSICPLAYERQ2D1
    LDA TEDTIMER+2
    BNE MUSICPLAYERQ2D1
    JMP MUSICPLAYERQ22
MUSICPLAYERQ2D1:
    DEC TEDTIMER+2
    CMP #$FF
    BNE MUSICPLAYERQ2D02
    DEC TEDTIMER+3
MUSICPLAYERQ2D02:
    LDA TEDTIMER+3
    BNE MUSICPLAYERQ22
    LDA TEDTIMER+2
    BNE MUSICPLAYERQ22
    JSR TEDSTOP1
MUSICPLAYERQ22:
    PLA
    RTS

MUSICPLAYERR:

; This is the entry point to wait until the waiting jiffies
; are exausted.
MUSICPLAYERL1:
    LDA TEDJIFFIES
    BEQ MUSICPLAYERL1B
    DEC TEDJIFFIES
    RTS

; This is the entry point to read the next instruction.
MUSICPLAYERL1B:
    ; Read the next byte.
    JSR MUSICREADNEXTBYTE

    ; Is the file NOT finished?
    CPX #$0
    BNE MUSICPLAYERL1X

    ; Let's stop the play!
    LDA #$0
    STA TEDMUSICREADY
    STA TEDTMPPTR
    STA TEDTMPPTR+1
    STA TEDJIFFIES
    RTS

; This is the entry point to decode the instruction
; (contained into the A register).
MUSICPLAYERL1X:
    ASL
    BCS MUSICPLAYERL1X0
    JMP MUSICWAIT
MUSICPLAYERL1X0:
    ASL
    BCS MUSICPLAYERL1X3
    PHA
    JSR MUSICREADNEXTBYTE
    PLA
    RTS 
MUSICPLAYERL1X3:
    ASL
    BCS MUSICPLAYERL1X1
    JMP MUSICNOTEON
MUSICPLAYERL1X1:
    ASL
    BCS MUSICPLAYERL1X2
    JMP MUSICNOTEOFF
MUSICPLAYERL1X2:
    RTS

MUSICWAIT:
    LSR
    STA TEDJIFFIES
    RTS

MUSICNOTEOFF:
    LSR
    LSR
    LSR
    LSR
    JSR TEDSTOP
    RTS    

MUSICNOTEON:
    LSR
    LSR
    LSR
    PHA
    JSR MUSICREADNEXTBYTE
    ASL
    TAY
    LDA (TEDTMPPTR2),Y
    TAX
    INY
    LDA (TEDTMPPTR2),Y
    TAY
    PLA
    JSR TEDPROGFREQ
    PHA
    JSR MUSICREADNEXTBYTE
    PLA
    RTS

; This routine has been added in order to read the
; next byte in a "blocked" byte stream.
MUSICREADNEXTBYTE:
    ; Let's check if we arrived at the end of the block.
    ; In that case, we must "load" the next block (or end
    ; the reading).
    LDY TEDTMPOFS
    CPY TEDTMPLEN
    BEQ MUSICREADNEXTBYTELE

MUSICREADNEXTBYTE2:
    LDX #$ff
    LDA (TEDTMPPTR), Y
    INY
    STY TEDTMPOFS
    RTS

; This is the entry point if a block (256 or less bytes)
; is finished, and we must move forward to the next block.
MUSICREADNEXTBYTELE:
    ; Is file finished?
    LDA TEDBLOCKS
    BEQ MUSICREADNEXTBYTEEND

    ; Put the index to 0
    LDY #$0
    STY TEDTMPOFS

    ; Increment the base address by 256
    INC TEDTMPPTR+1

    ; Decrement the number of remaining blocks
    DEC TEDBLOCKS

    ; If remaining blocks are 0, the last block
    ; length is different from 256 bytes.
    BEQ MUSICPLAYERLE2

    ; Remaining block is 256 bytes lenght.
    LDY #$FF
    STY TEDTMPLEN
    JMP MUSICREADNEXTBYTE2

    ; Remaining block is <256 bytes lenght.
MUSICPLAYERLE2:
    LDY TEDLASTBLOCK
    STY TEDTMPLEN
    JMP MUSICREADNEXTBYTE2

MUSICREADNEXTBYTEEND:
    LDX #$0
    RTS

CONSOLECALCULATE:
    LDA CURRENTMODE
    CMP #0
    BEQ CONSOLECALCULATE0
    CMP #1
    BEQ CONSOLECALCULATE1
    ; CMP #2
    ; BEQ CONSOLECALCULATE2
    ; CMP #3
    ; BEQ CONSOLECALCULATE3
    RTS

CONSOLECALCULATE0:
CONSOLECALCULATE1:
    LDA TEXTADDRESS
    STA MATHPTR0
    LDA TEXTADDRESS+1
    STA MATHPTR1
    LDX CONSOLEY1
    CPX #0
    BEQ CONSOLECALCULATEL1N
CONSOLECALCULATEL1:
    CLC
    LDA MATHPTR0
    ADC CURRENTTILESWIDTH
    STA MATHPTR0
    LDA MATHPTR1
    ADC #0
    STA MATHPTR1
    DEX
    BNE CONSOLECALCULATEL1
CONSOLECALCULATEL1N:
    CLC
    LDA MATHPTR0
    ADC CONSOLEX1
    STA MATHPTR0
    LDA MATHPTR1
    ADC #0
    STA MATHPTR1
    LDA MATHPTR0
    STA CONSOLESA
    LDA MATHPTR1
    STA CONSOLESA+1
    LDA CONSOLEW
    STA CONSOLEWB
    LDA CONSOLEH
    STA CONSOLEHB

    LDA COLORMAPADDRESS
    STA MATHPTR0
    LDA COLORMAPADDRESS+1
    STA MATHPTR1
    LDX CONSOLEY1
    CPX #0
    BNE CONSOLECALCULATECL1N
CONSOLECALCULATECL1:
    CLC
    LDA MATHPTR0
    ADC CURRENTTILESWIDTH
    STA MATHPTR0
    LDA MATHPTR1
    ADC #0
    STA MATHPTR1
    DEX
    BNE CONSOLECALCULATECL1
CONSOLECALCULATECL1N:
    CLC
    LDA MATHPTR0
    ADC CONSOLEX1
    STA MATHPTR0
    LDA MATHPTR1
    ADC #0
    STA MATHPTR1
    LDA MATHPTR0
    STA CONSOLECA
    LDA MATHPTR1
    STA CONSOLECA+1

    RTS

; CONSOLECALCULATE2:
; CONSOLECALCULATE3:
;     RTS
